const jsdom = require("jsdom");
const { JSDOM } = jsdom;
const sinon = require("sinon");

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ jsdom
const { window } = new JSDOM(`<!DOCTYPE html><body>
    <div id="qunit-fixture"></div>
</body>`, { url: "http://localhost" });

const $ = require("jquery")(window);

global.window = window;
global.document = window.document;
global.$ = $;

const { initSettingsForm, handleSliderInput, sliderInputEventHandler, registerDOMContentLoaded } = require("../edit_settings.js");

QUnit.module("Settings Form Tests", hooks => {

    hooks.beforeEach(() => {
        $('#qunit-fixture').empty();
    });

    QUnit.test("–ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è", assert => {
        $('#qunit-fixture').html(`
            <label>Font Size: <span id="font-size-display"></span></label>
            <input type="range" id="id_font_size" min="10" max="50" value="20">
        `);

        const output = document.getElementById("font-size-display");

        initSettingsForm();

        assert.equal(output.textContent.trim(), "20 px", "–ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–≤–µ–¥–µ–Ω–æ");
    });

    QUnit.test("–ó–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω—é—î—Ç—å—Å—è –ø—Ä–∏ input –ø–æ–¥—ñ—ó", assert => {
        $('#qunit-fixture').html(`
            <label>Font Size: <span id="font-size-display"></span></label>
            <input type="range" id="id_font_size" min="10" max="50" value="16">
        `);

        const slider = document.getElementById("id_font_size");
        const output = document.getElementById("font-size-display");

        initSettingsForm();

        slider.value = 30;
        slider.dispatchEvent(new window.Event("input"));

        assert.equal(output.textContent.trim(), "30 px", "–ó–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è input");
    });

    QUnit.test("handleSliderInput –ø—Ä–∞—Ü—é—î –Ω–∞–ø—Ä—è–º—É", assert => {
        const slider = { value: 42 };
        const output = { innerHTML: "" };

        handleSliderInput(slider, output);

        assert.equal(output.innerHTML, "42 px", "handleSliderInput –Ω–∞–ø—Ä—è–º—É –ø—Ä–∞—Ü—é—î");
    });

    QUnit.test("sliderInputEventHandler –Ω–∞–ø—Ä—è–º—É –ø—Ä–∞—Ü—é—î", assert => {
        const slider = { value: 55 };
        const output = { innerHTML: "" };

        const handler = sliderInputEventHandler(slider, output);
        handler();

        assert.equal(output.innerHTML, "55 px", "Event handler –Ω–∞–ø—Ä—è–º—É –ø—Ä–∞—Ü—é—î");
    });

    QUnit.test("initSettingsForm –Ω–∞–ø—Ä—è–º—É –≤–∏–∫–æ–Ω—É—î –≤—Å—ñ –¥—ñ—ó", assert => {
        const slider = document.createElement("input");
        slider.type = "range";
        slider.value = 35;

        const output = document.createElement("span");

        const addEventListenerSpy = sinon.spy(slider, "addEventListener");

        initSettingsForm(slider, output);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ handleSliderInput –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–≤
        assert.equal(output.innerHTML, "35 px", "handleSliderInput –æ–Ω–æ–≤–∏–≤ —Ç–µ–∫—Å—Ç");

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –¥–æ–¥–∞–ª–∏ event listener
        assert.ok(addEventListenerSpy.calledOnceWith("input"), "Event listener –¥–æ–¥–∞–Ω–æ");

        addEventListenerSpy.restore();
    });

    QUnit.test("–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –ª–∞–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—é", assert => {
        $('#qunit-fixture').empty();

        initSettingsForm();

        assert.ok(true, "–§—É–Ω–∫—Ü—ñ—è –±–µ–∑–ø–µ—á–Ω–æ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –±–µ–∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤");
    });

    // üî• –ù–æ–≤–∏–π –≤–∞–∂–ª–∏–≤–∏–π —Ç–µ—Å—Ç, —â–æ –ø–æ–∫—Ä–∏–≤–∞—î —Ä—è–¥–∫–∏ 17-18
    QUnit.test("initSettingsForm –≤–∏–∫–æ–Ω—É—î handleSliderInput —ñ –¥–æ–¥–∞—î event listener", assert => {
        $('#qunit-fixture').html(`
            <label>Font Size: <span id="font-size-display"></span></label>
            <input type="range" id="id_font_size" min="10" max="50" value="22">
        `);

        const slider = document.getElementById("id_font_size");
        const output = document.getElementById("font-size-display");

        const addEventListenerSpy = sinon.spy(slider, "addEventListener");

        initSettingsForm();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç–µ–∫—Å—Ç –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî handleSliderInput –≤–∏–∫–æ–Ω–∞–≤—Å—è
        assert.equal(output.textContent.trim(), "22 px", "handleSliderInput –æ–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–æ–¥–∞–Ω–æ event listener
        assert.ok(addEventListenerSpy.calledOnceWith("input"), "Event listener –¥–æ–¥–∞–Ω–æ");

        addEventListenerSpy.restore();
    });

    QUnit.test("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–∏–¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Äî —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è", assert => {
        $('#qunit-fixture').empty();

        initSettingsForm();

        assert.ok(true, "–§—É–Ω–∫—Ü—ñ—è –±–µ–∑–ø–µ—á–Ω–æ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –±–µ–∑ –æ–±–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤");
    });

    QUnit.test("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç—ñ–ª—å–∫–∏ slider ‚Äî —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è", assert => {
        $('#qunit-fixture').html(`
            <label>Font Size: <span id="font-size-display"></span></label>
        `); // –¢—ñ–ª—å–∫–∏ output

        initSettingsForm();

        assert.ok(true, "–§—É–Ω–∫—Ü—ñ—è –±–µ–∑ —Å–ª–∞–π–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–∫–∏");
    });

    QUnit.test("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç—ñ–ª—å–∫–∏ output ‚Äî —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è", assert => {
        $('#qunit-fixture').html(`
            <input type="range" id="id_font_size" min="10" max="50" value="16">
        `); // –¢—ñ–ª—å–∫–∏ slider

        initSettingsForm();

        assert.ok(true, "–§—É–Ω–∫—Ü—ñ—è –±–µ–∑ output –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–∫–∏");
    });

    QUnit.test("–°–ª–∞–π–¥–µ—Ä –æ—Ç—Ä–∏–º—É—î event listener", assert => {
        $('#qunit-fixture').html(`
            <label>Font Size: <span id="font-size-display"></span></label>
            <input type="range" id="id_font_size" min="10" max="50" value="25">
        `);

        const slider = document.getElementById("id_font_size");
        const addEventListenerSpy = sinon.spy(slider, "addEventListener");

        initSettingsForm();

        assert.ok(addEventListenerSpy.calledWith("input"), "Event listener –¥–æ–¥–∞–Ω–æ");

        addEventListenerSpy.restore();
    });

    QUnit.test("DOMContentLoaded –≤–∏–∫–ª–∏–∫–∞—î initSettingsForm —á–µ—Ä–µ–∑ spy", assert => {
        const spy = sinon.spy();
        const original = document.addEventListener;

        sinon.stub(document, 'addEventListener').callsFake((event, callback) => {
            if (event === 'DOMContentLoaded') {
                spy();
            }
            return original.call(document, event, callback);
        });

        // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥ —á–∞—Å —ñ–º–ø–æ—Ä—Ç—É
        delete require.cache[require.resolve("../edit_settings.js")];
        require("../edit_settings.js");

        assert.ok(spy.called, "initSettingsForm –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ DOMContentLoaded");

        document.addEventListener.restore();
    });

    QUnit.test("registerDOMContentLoaded –¥–æ–¥–∞—î listener", assert => {
        const addEventListenerSpy = sinon.spy(document, "addEventListener");

        registerDOMContentLoaded();

        assert.ok(addEventListenerSpy.calledWith('DOMContentLoaded'), "DOMContentLoaded listener –¥–æ–¥–∞–Ω–æ");

        addEventListenerSpy.restore();
    });
});